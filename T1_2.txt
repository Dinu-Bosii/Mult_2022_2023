# %%
import matplotlib.pyplot as plt
import matplotlib.colors as clr
import numpy as np


img = plt.imread('peppers.bmp')
plt.figure(1)
plt.axis('off'), plt.title("peppers"), plt.imshow(img)

cmGray = clr.LinearSegmentedColormap.from_list('gray', [(0, 0, 0), (1, 1, 1)], 256)

cmRed = clr.LinearSegmentedColormap.from_list('red', [(0, 0, 0), (1, 0, 0)], 256)

cmGreen = clr.LinearSegmentedColormap.from_list('green', [(0, 0, 0), (0, 1, 0)], 256)

cmBlue = clr.LinearSegmentedColormap.from_list('blue', [(0, 0, 0), (0, 0, 1)], 256)
plt.figure(2)
R = img[:, :, 0]

# plt.imshow(R, cmRed)

G = img[:, :, 1]
# plt.imshow(G, cmGreen)

B = img[:, :, 2]
# plt.imshow(B, cmBlue)

[nl, nc, nCh] = img.shape

imgRec = np.zeros((nl, nc, nCh))

imgRec[:, :, 0] = R
imgRec[:, :, 1] = G
imgRec[:, :, 2] = B

x = np.random.rand(5, 4)
nnl = 8 - nl % 8

[nl, nc] = x.shape

ll = x[nl-1, :]

ll = x[nl-1, :][np.newaxis, :]
# for a column, ll = x[nl-1, :][:, np.newaxis]

rep = ll.repeat(nnl, axis=0)

# para adicionar rep a x, vertically
# np.hstack for horizontally
xp = np.vstack([x, rep])

T = np.random.rand(3, 3)

Y = T[0, 0]*R + T[0, 1]*B + T[0, 2]*G

Tinv = np.linalg.inv(T)

Rdecoded = Tinv[0, 0]*Y + Tinv[0, 1]*(Cb-128) + Tinv[0, 2]*(Cb - 128)
#Rdecoded = Tinv[0, 0]*Y + Tinv[0, 1]*(Cb-128) + Tinv[0, 2]*(Cr - 128)

Rdecoded = np.round(Rdecoded).astype(np.uint8)
Rdecoded = Rdecoded[Rdecoded>255] = 255 #clamping
Rdecoded = Rdecoded[Rdecoded < 0] = 0
#typecast after clamping

# decoder

xr = xp[:nl, :nc]


def decoder():
    print("yo")


def encoder():
    print("yo2")

# jpeg - bom para imagens com transicoes subtis de cor
# jpeg images tÃªm de ter linhas/colunas multiplas de 32

# %%
